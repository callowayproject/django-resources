===============
Using Resources
===============

Using a resource requires instantiating the registered resource class with an instance of the appropriate class. In short::

    ExampleResource(Example.objects.get(id=1))

But since you probably are missing key information about which resource goes with with object, there are some easier ways to do this.

Getting the Resource class from a model
=======================================

If you have the model, you can get the resource class from the :ref:`resource_list`.

.. code-block:: python

    from supplycloset import resource_list
    from simpleapp.models import Food
    FoodResourceClass = resource_list[Food]

Then you can instantiate the class with any :py:class:`Food` object.

.. code-block:: python

    food_item = Food.objects.get(id=1)
    resource = FoodResourceClass(food_item)

Getting the Resource from a model instance
==========================================

An even simpler way to get a Resource is to use the :py:method:`ResourceList.get_for_instance` method on the :ref:`resource_list` object. This method takes an instance, and does the lookup and instantiation for you.

.. code-block:: python

    from supplycloset import resource_list
    from simpleapp.models import Food
    food_item = Food.objects.get(id=1)
    resource = resource_list.get_for_instance(food_item)


Accessing resource attributes
=============================

A Resource class attempts to get an attribute several ways:

#. An attempt to access attribute resource.FOO attempts to call the ResourceClass' get_FOO() method.
#. If a subclass has defined the get_FOO method, then that result is returned.
#. If there is not a ``get_FOO()`` method defined, the resource attempts to get the FOO attribute from the original instance.
#. If that fails, it will either raise an :py:class:`AttributeError` if the ResourceClass' ``raise_error_on_missing`` is ``True`` (its default value is ``False``) or return the ResourceClass' ``missing_attribute_value`` value, which is ``''`` by default.